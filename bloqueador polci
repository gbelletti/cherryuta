{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gbelletti/gbelletti/blob/main/bloqueador%20polci\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# V2.6 En evaluación: espero feedback ;)"
      ],
      "metadata": {
        "id": "Cwuzcb3eWF7m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " [La lista de usuarios que se bloquearían si se corre el script es esta, proceder con cautela, revisar manualmente](https://raw.githubusercontent.com/pablofp92/Datasets/main/blocklist.json)"
      ],
      "metadata": {
        "id": "DdekXS5hX7MK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Si creen que alguien no debe estar en la lista y se cometió un error al taggearlo como \"troll\" por favor informalo en este [link](https://docs.google.com/forms/d/e/1FAIpQLSdtipSq28oO_kruUomNJGW_L0y24cD0-huY5uJAK6O6lYtfRg/viewform?usp=sf_link)"
      ],
      "metadata": {
        "id": "FjL5Y8loWxbU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "🔽🔽🔽 **IMPORTANTE** 🔽🔽🔽\n",
        "Todas las celdas deben ser ejecutadas en orden (excepto las que dicen lo contrario)\n",
        "Las celdas se ejecutan con el botón play que aparece a la izquierda ▶. Cuando la celda se ejecuta correctamente aparece un tick verde ✅\n",
        "Si ocurre un error volver a ejecutar la celda, si persiste enviar DM a @polariscopi0"
      ],
      "metadata": {
        "id": "MKFm6TCmK80R"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "iQv2aVOu9o9z",
        "outputId": "7e4ee11a-05b2-4b94-e270-1fe958df1c25",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2024-04-02 15:13:46--  https://raw.githubusercontent.com/pablofp92/Datasets/main/blocklist.json\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 137602 (134K) [text/plain]\n",
            "Saving to: ‘blocklist.json’\n",
            "\n",
            "\rblocklist.json        0%[                    ]       0  --.-KB/s               \rblocklist.json      100%[===================>] 134.38K  --.-KB/s    in 0.003s  \n",
            "\n",
            "2024-04-02 15:13:46 (41.2 MB/s) - ‘blocklist.json’ saved [137602/137602]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!wget https://raw.githubusercontent.com/pablofp92/Datasets/main/blocklist.json"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install https://github.com/mahrtayyab/tweety/archive/main.zip --upgrade"
      ],
      "metadata": {
        "id": "CE226IGdpogp",
        "outputId": "12a85df4-a38b-4d74-89d1-0ad6fae77a89",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting https://github.com/mahrtayyab/tweety/archive/main.zip\n",
            "  Downloading https://github.com/mahrtayyab/tweety/archive/main.zip (98 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.5/98.5 kB\u001b[0m \u001b[31m573.8 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from tweety-ns==1.1.1) (4.12.3)\n",
            "Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (from tweety-ns==1.1.1) (3.1.2)\n",
            "Collecting httpx (from tweety-ns==1.1.1)\n",
            "  Downloading httpx-0.27.0-py3-none-any.whl (75 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m75.6/75.6 kB\u001b[0m \u001b[31m2.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting dateutils (from tweety-ns==1.1.1)\n",
            "  Downloading dateutils-0.6.12-py2.py3-none-any.whl (5.7 kB)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->tweety-ns==1.1.1) (2.5)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from dateutils->tweety-ns==1.1.1) (2.8.2)\n",
            "Requirement already satisfied: pytz in /usr/local/lib/python3.10/dist-packages (from dateutils->tweety-ns==1.1.1) (2023.4)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.10/dist-packages (from httpx->tweety-ns==1.1.1) (3.7.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx->tweety-ns==1.1.1) (2024.2.2)\n",
            "Collecting httpcore==1.* (from httpx->tweety-ns==1.1.1)\n",
            "  Downloading httpcore-1.0.5-py3-none-any.whl (77 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.9/77.9 kB\u001b[0m \u001b[31m1.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: idna in /usr/local/lib/python3.10/dist-packages (from httpx->tweety-ns==1.1.1) (3.6)\n",
            "Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from httpx->tweety-ns==1.1.1) (1.3.1)\n",
            "Collecting h11<0.15,>=0.13 (from httpcore==1.*->httpx->tweety-ns==1.1.1)\n",
            "  Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.3/58.3 kB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl->tweety-ns==1.1.1) (1.1.0)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio->httpx->tweety-ns==1.1.1) (1.2.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->dateutils->tweety-ns==1.1.1) (1.16.0)\n",
            "Building wheels for collected packages: tweety-ns\n",
            "  Building wheel for tweety-ns (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for tweety-ns: filename=tweety_ns-1.1.1-py3-none-any.whl size=70366 sha256=a1c22cd5ad85bc45e323ea2bd72e461211f13d94d86c210bea3a4d0ef99e43c7\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-sfh26m4v/wheels/28/67/45/f148cacb1f5c1e58fbd5654ab9db44dc8ed08a3aeef726e8ac\n",
            "Successfully built tweety-ns\n",
            "Installing collected packages: h11, httpcore, dateutils, httpx, tweety-ns\n",
            "Successfully installed dateutils-0.6.12 h11-0.14.0 httpcore-1.0.5 httpx-0.27.0 tweety-ns-1.1.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import pandas as pd\n",
        "#import numpy as np\n",
        "#import os\n",
        "#import requests\n",
        "#from selenium import webdriver\n",
        "#from selenium.webdriver.common.by import By\n",
        "#from selenium.webdriver.common.keys import Keys\n",
        "import time\n",
        "#import re\n",
        "#from selenium import webdriver\n",
        "#import google_colab_selenium as gs\n",
        "#from selenium.webdriver.support.wait import WebDriverWait\n",
        "#from selenium.webdriver.support import expected_conditions as EC\n",
        "from tweety import Twitter\n",
        "import json\n",
        "from datetime import date\n",
        "from google.colab import files\n"
      ],
      "metadata": {
        "id": "OX6nCxRSA_kK"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('blocklist.json', \"r\") as f:\n",
        "    blocklist = json.loads(f.read())"
      ],
      "metadata": {
        "id": "n3wktSzTBNaX"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Reemplazá \"USUARIO\" y \"CONTRASEÑA\" por tus credenciales. Lo que escribas queda guardado en tu google drive, por seguridad te recomiendo borrarlo luego de utilizar el notebook."
      ],
      "metadata": {
        "id": "yAuZaoqqKuBy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "user = \"cyberhjoong\"\n",
        "password = \"forinti=0\""
      ],
      "metadata": {
        "id": "_LCsgAeACywr"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def start_twitter(u,p):\n",
        "    app = Twitter(\"session\")\n",
        "    app.start(u, p)\n",
        "    print(app.user)\n",
        "    return app\n",
        "\n",
        "app = start_twitter(user,password)"
      ],
      "metadata": {
        "id": "6jZJDpZzpwP6",
        "outputId": "badc230d-6c74-4d93-d3a9-f7174d0d95b1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\rAction Required :> Help us keep your account safe.. Verify your identity by entering the phone number associated with your X account.\t\n",
            "Hint: ending in 52 : +5493425931852\n",
            "User(id=1546095337252667392, username=cyberhjoong, name=gaelito 🏴‍☠️, verified=False)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#IMPORTANTE: las siguientes celda solo debe ser ejecutada si desea retomar el script de una sesión previa. Si es la primera vez que corrés el script saltá a la celda que dice ACÁ COMIENZA"
      ],
      "metadata": {
        "id": "dCURINT0C62C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ejecutá la celda de abajo y cargá el archivo `blocklist` que descargaste en la sesión anterior\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "NYkzj2muC9Qb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "uploaded = files.upload()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "FEA6SjvNAibl",
        "outputId": "1cd67d0c-2b8a-4f75-e07f-b68a09d7aae2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-03cb21bf-8d8f-4021-9439-2ab662bf497c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-03cb21bf-8d8f-4021-9439-2ab662bf497c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving blocklist_2024-04-01.json to blocklist_2024-04-01 (1).json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = next(iter(uploaded.values()))\n",
        "blocklist = json.loads(data.decode())"
      ],
      "metadata": {
        "id": "w7XhFzBQB5DE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Acá comienza a bloquear!\n",
        "\n",
        "Si obtenés error `RateLimit` incrementar TIME en 1"
      ],
      "metadata": {
        "id": "L_zjvQImC62L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "TIME = 2\n"
      ],
      "metadata": {
        "id": "MtpNPmNQKjBR"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "success_block = []\n",
        "unsuccess_block = []\n",
        "errors_in_a_row = 0\n",
        "large_wait = TIME*60\n",
        "\n",
        "blocked_users = [i.id for i in app.get_blocked_users().users]\n",
        "\n",
        "for n, (k,v) in enumerate(blocklist.items()):\n",
        "    if n%10 == 0:\n",
        "        time.sleep(TIME)\n",
        "    if n == 499:\n",
        "        print(f\"El script retoma su trabajo en {large_wait} segundos\")\n",
        "        time.sleep(TIME*60)\n",
        "    if errors_in_a_row > 10:\n",
        "        print(\"Es probable que se haya alcanzando el límite de blocks diarios. Se volverá a intentar volviendo a abrir la cuenta\")\n",
        "        try:\n",
        "            app = start_twitter(user,password)\n",
        "        except:\n",
        "            print(\"Falló segundo intento... probá nuevamente mañana\")\n",
        "            break\n",
        "    if v in success_block or v in blocked_users:\n",
        "        continue\n",
        "    try:\n",
        "        app.block_user(f\"{v}\")\n",
        "        print(f\"{n}/{len(blocklist)}: {k} bloqueado correctamente\")\n",
        "        success_block.append(v)\n",
        "        errors_in_a_row = 0\n",
        "    except:\n",
        "        print(f\"{n}/{len(blocklist)}: {k} no pudo ser bloqueado\")\n",
        "        time.sleep(TIME)\n",
        "        unsuccess_block.append(v)\n",
        "        errors_in_a_row += 1\n",
        "\n",
        "\n",
        "print(f\"Quedaron {len(unsuccess_block)} usuarios sin bloquear, si desea reintentar recursivamente corra la celda inferior. Si alcanzó el límite diario de bloqueos intente posteriormente, se podrá descargar una lista para continuar luego\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Fsp-xMjPbHlx",
        "outputId": "3678fd6f-fc59-4b31-a2de-74c056607350",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0/4191: Marcelo34997204 bloqueado correctamente\n",
            "1/4191: jaelovesgot7 bloqueado correctamente\n",
            "2/4191: nhiroooo bloqueado correctamente\n",
            "3/4191: limitada2019 bloqueado correctamente\n",
            "4/4191: oyemirugir bloqueado correctamente\n",
            "5/4191: hernanramos309 bloqueado correctamente\n",
            "6/4191: MariaLauraCorb5 bloqueado correctamente\n",
            "7/4191: Andrea11831741 bloqueado correctamente\n",
            "8/4191: SAMBAY0N bloqueado correctamente\n",
            "9/4191: p_quibeluma bloqueado correctamente\n",
            "10/4191: PerritoLiberal bloqueado correctamente\n",
            "11/4191: MartinliberD bloqueado correctamente\n",
            "12/4191: FrancoZimmer bloqueado correctamente\n",
            "13/4191: PoliticosComAr bloqueado correctamente\n",
            "14/4191: ReddoChan bloqueado correctamente\n",
            "15/4191: BitcoinHofmann bloqueado correctamente\n",
            "16/4191: virgilioelpoet1 bloqueado correctamente\n",
            "17/4191: galyalibertaria bloqueado correctamente\n",
            "18/4191: pastafrulaaa bloqueado correctamente\n",
            "19/4191: victorazarok bloqueado correctamente\n",
            "20/4191: AdonayPernia bloqueado correctamente\n",
            "21/4191: gsam_14 bloqueado correctamente\n",
            "22/4191: maprediletto bloqueado correctamente\n",
            "23/4191: ArgZeira bloqueado correctamente\n",
            "24/4191: Kooch_ail bloqueado correctamente\n",
            "25/4191: lautatripero bloqueado correctamente\n",
            "26/4191: D4n1p05qu3m45 bloqueado correctamente\n",
            "27/4191: SomosKaluyMoro bloqueado correctamente\n",
            "28/4191: S_Doffigny bloqueado correctamente\n",
            "29/4191: ticotraveler29 bloqueado correctamente\n",
            "30/4191: Elpibedelabasur bloqueado correctamente\n",
            "31/4191: Thekingtrol bloqueado correctamente\n",
            "32/4191: Carlos09614506 bloqueado correctamente\n",
            "33/4191: PsiclogoCognit1 bloqueado correctamente\n",
            "34/4191: M21Celeste bloqueado correctamente\n",
            "35/4191: _mq3f bloqueado correctamente\n",
            "36/4191: javiersantael11 bloqueado correctamente\n",
            "37/4191: daniel_ordone25 bloqueado correctamente\n",
            "38/4191: rontech777 bloqueado correctamente\n",
            "39/4191: LucasGTI250591 bloqueado correctamente\n",
            "40/4191: claudiogn64d bloqueado correctamente\n",
            "41/4191: r0n_sau bloqueado correctamente\n",
            "42/4191: elmichitto bloqueado correctamente\n",
            "43/4191: Venusmars211 bloqueado correctamente\n",
            "44/4191: NicolsEduardoA3 bloqueado correctamente\n",
            "45/4191: Antiperonchos18 bloqueado correctamente\n",
            "46/4191: LeonelR35304507 bloqueado correctamente\n",
            "47/4191: Powerrush_ bloqueado correctamente\n",
            "48/4191: hiedramora bloqueado correctamente\n",
            "49/4191: dantesco7006 bloqueado correctamente\n",
            "50/4191: IvanDeoli13 bloqueado correctamente\n",
            "51/4191: simplementefed bloqueado correctamente\n",
            "52/4191: federstaffel bloqueado correctamente\n",
            "53/4191: JuanManuel_8533 bloqueado correctamente\n",
            "54/4191: trixtoni bloqueado correctamente\n",
            "55/4191: bonifacio5_trc bloqueado correctamente\n",
            "56/4191: bot_7882 bloqueado correctamente\n",
            "57/4191: Leoneljoha bloqueado correctamente\n",
            "58/4191: GaraxGuzman bloqueado correctamente\n",
            "59/4191: ohdearmoriarty bloqueado correctamente\n",
            "60/4191: foro_lima bloqueado correctamente\n",
            "61/4191: sportacvs_ bloqueado correctamente\n",
            "62/4191: losvaporesianos bloqueado correctamente\n",
            "63/4191: koslayo bloqueado correctamente\n",
            "64/4191: fernan1790 bloqueado correctamente\n",
            "65/4191: Lucas_Garcia_92 bloqueado correctamente\n",
            "66/4191: LilaMohini bloqueado correctamente\n",
            "67/4191: Lola_Sunset bloqueado correctamente\n",
            "68/4191: mileista2024 bloqueado correctamente\n",
            "69/4191: AlgoCosa30680 bloqueado correctamente\n",
            "70/4191: matiasgerard bloqueado correctamente\n",
            "71/4191: MorenoRealest bloqueado correctamente\n",
            "72/4191: ErmacComentador bloqueado correctamente\n",
            "73/4191: Le_Pastaio bloqueado correctamente\n",
            "74/4191: Thevilthatmend6 bloqueado correctamente\n",
            "75/4191: Fernand75486241 bloqueado correctamente\n",
            "76/4191: TimeBeRealMan_ bloqueado correctamente\n",
            "77/4191: reglapunta bloqueado correctamente\n",
            "78/4191: ale_stiv bloqueado correctamente\n",
            "79/4191: KalaFrank5 bloqueado correctamente\n",
            "80/4191: Muhammadihere bloqueado correctamente\n",
            "81/4191: estadoserrantes bloqueado correctamente\n",
            "82/4191: LaIslaneta bloqueado correctamente\n",
            "83/4191: Albef13 bloqueado correctamente\n",
            "84/4191: fundapolo bloqueado correctamente\n",
            "85/4191: unpibeespecialk bloqueado correctamente\n",
            "86/4191: fargosi bloqueado correctamente\n",
            "87/4191: tinchoxx bloqueado correctamente\n",
            "88/4191: FedeBenner bloqueado correctamente\n",
            "89/4191: NoseSiSoyPato bloqueado correctamente\n",
            "90/4191: JuanMaOrm bloqueado correctamente\n",
            "91/4191: norilof bloqueado correctamente\n",
            "92/4191: fallend29 bloqueado correctamente\n",
            "93/4191: Bitcoinesdios bloqueado correctamente\n",
            "94/4191: ROMI_ANTF bloqueado correctamente\n",
            "95/4191: MILEItokenbot bloqueado correctamente\n",
            "96/4191: agarra_pala bloqueado correctamente\n",
            "97/4191: heisenburgo94 bloqueado correctamente\n",
            "98/4191: javierlanari bloqueado correctamente\n",
            "99/4191: Polaquito888 bloqueado correctamente\n",
            "100/4191: trespesitos1 bloqueado correctamente\n",
            "101/4191: howitadok bloqueado correctamente\n",
            "102/4191: marub49 bloqueado correctamente\n",
            "103/4191: 8VC bloqueado correctamente\n",
            "104/4191: estridenteok bloqueado correctamente\n",
            "105/4191: C0sme__Fulanit0 bloqueado correctamente\n",
            "106/4191: flavionahuel95 bloqueado correctamente\n",
            "107/4191: milfosero bloqueado correctamente\n",
            "108/4191: BCN_Plus bloqueado correctamente\n",
            "109/4191: HugoM24376365 bloqueado correctamente\n",
            "110/4191: CristianPeron93 bloqueado correctamente\n",
            "111/4191: Enkiliberal bloqueado correctamente\n",
            "112/4191: SantiSotelos97 bloqueado correctamente\n",
            "113/4191: yosoyJuanma89 bloqueado correctamente\n",
            "114/4191: Kamui_DoUrden bloqueado correctamente\n",
            "115/4191: Roberliberal bloqueado correctamente\n",
            "116/4191: elpeladxhiberna bloqueado correctamente\n",
            "117/4191: thesolrac98 bloqueado correctamente\n",
            "118/4191: KuroLucci bloqueado correctamente\n",
            "119/4191: contender_r bloqueado correctamente\n",
            "120/4191: valeealgo bloqueado correctamente\n",
            "121/4191: CHC31 bloqueado correctamente\n",
            "122/4191: carlose13347042 bloqueado correctamente\n",
            "123/4191: ggbot101101 bloqueado correctamente\n",
            "124/4191: Jonatha31927519 bloqueado correctamente\n",
            "125/4191: AurelionSolaris bloqueado correctamente\n",
            "126/4191: mamitamdq bloqueado correctamente\n",
            "127/4191: borisbarrera bloqueado correctamente\n",
            "128/4191: Giotano bloqueado correctamente\n",
            "129/4191: ulinp0 bloqueado correctamente\n",
            "130/4191: BonifacioFerjb bloqueado correctamente\n",
            "131/4191: FriedAugHayek bloqueado correctamente\n",
            "132/4191: handsup2023 bloqueado correctamente\n",
            "133/4191: DaroBarq bloqueado correctamente\n",
            "134/4191: ladymorket bloqueado correctamente\n",
            "135/4191: Dr_Nck bloqueado correctamente\n",
            "136/4191: lupus_666 bloqueado correctamente\n",
            "137/4191: Clceli bloqueado correctamente\n",
            "138/4191: Guillermo_1142 bloqueado correctamente\n",
            "139/4191: starplatinum023 bloqueado correctamente\n",
            "140/4191: david_kleriga bloqueado correctamente\n",
            "141/4191: incongnito7288 bloqueado correctamente\n",
            "142/4191: LibertadGris bloqueado correctamente\n",
            "143/4191: liberalismoalpa bloqueado correctamente\n",
            "144/4191: AraujoFacundo bloqueado correctamente\n",
            "145/4191: Damianraf23 bloqueado correctamente\n",
            "146/4191: McPepes_AI bloqueado correctamente\n",
            "147/4191: CeCuEREN bloqueado correctamente\n",
            "148/4191: Arielo_TT bloqueado correctamente\n",
            "149/4191: secillamente2yo bloqueado correctamente\n",
            "150/4191: ideasliberales_ bloqueado correctamente\n",
            "151/4191: LouisLibre bloqueado correctamente\n",
            "153/4191: Ulises_Pen bloqueado correctamente\n",
            "154/4191: bulltraper bloqueado correctamente\n",
            "155/4191: CarlosTotoRico bloqueado correctamente\n",
            "156/4191: GatoTrump2020 bloqueado correctamente\n",
            "157/4191: PeronIsShit bloqueado correctamente\n",
            "158/4191: Anthony96321747 bloqueado correctamente\n",
            "159/4191: DrMarioNavajas bloqueado correctamente\n",
            "160/4191: ernestoorsetti bloqueado correctamente\n",
            "161/4191: VofCommunism1 bloqueado correctamente\n",
            "162/4191: raddusac bloqueado correctamente\n",
            "163/4191: NJFCarp bloqueado correctamente\n",
            "164/4191: yannamaia3 bloqueado correctamente\n",
            "165/4191: aopoli5189 bloqueado correctamente\n",
            "166/4191: valeriafilini_ bloqueado correctamente\n",
            "167/4191: ClimateHero_me bloqueado correctamente\n",
            "168/4191: leandroortizsn bloqueado correctamente\n",
            "169/4191: MenemAbrazo bloqueado correctamente\n",
            "170/4191: Independiente bloqueado correctamente\n",
            "171/4191: puntano2023 bloqueado correctamente\n",
            "172/4191: Fuerzasdelciel8 bloqueado correctamente\n",
            "173/4191: CbCryptoschool bloqueado correctamente\n",
            "174/4191: malvinas_gaming bloqueado correctamente\n",
            "175/4191: JMilei__ bloqueado correctamente\n",
            "176/4191: OTrismegisto bloqueado correctamente\n",
            "177/4191: SilvanaFlitz bloqueado correctamente\n",
            "178/4191: tomasv90 bloqueado correctamente\n",
            "179/4191: andres1281 bloqueado correctamente\n",
            "180/4191: Marcelo47398462 bloqueado correctamente\n",
            "181/4191: chirofa bloqueado correctamente\n",
            "182/4191: luca_burgos bloqueado correctamente\n",
            "183/4191: joaquin_curi bloqueado correctamente\n",
            "184/4191: Buenbit bloqueado correctamente\n",
            "185/4191: JaraMaximilian7 bloqueado correctamente\n",
            "186/4191: huatrache245787 bloqueado correctamente\n",
            "187/4191: quetiporta19 bloqueado correctamente\n",
            "188/4191: manucocor bloqueado correctamente\n",
            "189/4191: mgddlv bloqueado correctamente\n",
            "190/4191: NicolasArg0291 bloqueado correctamente\n",
            "191/4191: martemusche bloqueado correctamente\n",
            "192/4191: axel_fabio14986 bloqueado correctamente\n",
            "193/4191: FreedomWarriorA bloqueado correctamente\n",
            "194/4191: Madrid18129 bloqueado correctamente\n",
            "195/4191: DomadordeK5N bloqueado correctamente\n",
            "196/4191: rousafernandez bloqueado correctamente\n",
            "197/4191: 2CoffeeTime2 bloqueado correctamente\n",
            "198/4191: Brisa_belamia bloqueado correctamente\n",
            "199/4191: norasansur62 bloqueado correctamente\n",
            "200/4191: Garolfo3 bloqueado correctamente\n",
            "201/4191: tomsz95 bloqueado correctamente\n",
            "202/4191: RobertoRam1977 bloqueado correctamente\n",
            "203/4191: paron_md bloqueado correctamente\n",
            "204/4191: goatinx bloqueado correctamente\n",
            "205/4191: tortafritero bloqueado correctamente\n",
            "206/4191: abigailru1z bloqueado correctamente\n",
            "207/4191: PipiUniversel bloqueado correctamente\n",
            "208/4191: damiandmngz bloqueado correctamente\n",
            "209/4191: perrybtc_ bloqueado correctamente\n",
            "210/4191: TraductorTeAma bloqueado correctamente\n",
            "211/4191: LucasTagl1 bloqueado correctamente\n",
            "212/4191: Maxymaxxx1 bloqueado correctamente\n",
            "213/4191: germanMperezD bloqueado correctamente\n",
            "214/4191: Sol_V_S bloqueado correctamente\n",
            "215/4191: caarlosfloresg bloqueado correctamente\n",
            "216/4191: OsoHombreGris bloqueado correctamente\n",
            "217/4191: ignawey9 bloqueado correctamente\n",
            "218/4191: Silviobahiense bloqueado correctamente\n",
            "219/4191: ElPaimonsito bloqueado correctamente\n",
            "220/4191: catfinwesha bloqueado correctamente\n",
            "221/4191: martincasabig bloqueado correctamente\n",
            "223/4191: empireenjoyer10 bloqueado correctamente\n",
            "224/4191: juliestresado94 bloqueado correctamente\n",
            "225/4191: partelmo49 bloqueado correctamente\n",
            "226/4191: mobedu1960 bloqueado correctamente\n",
            "227/4191: LocutorNac_1986 bloqueado correctamente\n",
            "228/4191: Gnomesaurus bloqueado correctamente\n",
            "229/4191: danypatriot7 bloqueado correctamente\n",
            "230/4191: realbeperry bloqueado correctamente\n",
            "231/4191: boer1978 bloqueado correctamente\n",
            "232/4191: lencina_tomiii bloqueado correctamente\n",
            "233/4191: libreelpela bloqueado correctamente\n",
            "234/4191: MSN_Money bloqueado correctamente\n",
            "235/4191: braian_Xeno bloqueado correctamente\n",
            "236/4191: darioruben28 bloqueado correctamente\n",
            "237/4191: OtroArgy bloqueado correctamente\n",
            "238/4191: fedubi3 bloqueado correctamente\n",
            "239/4191: AlfieSolomonsOk bloqueado correctamente\n",
            "240/4191: AnonimoenTw2 bloqueado correctamente\n",
            "241/4191: Eazy__K bloqueado correctamente\n",
            "242/4191: cordobe_anonimo bloqueado correctamente\n",
            "243/4191: hogardegatos bloqueado correctamente\n",
            "244/4191: ignacio__cabj12 bloqueado correctamente\n",
            "245/4191: dmnicomb bloqueado correctamente\n",
            "246/4191: _Lukkk bloqueado correctamente\n",
            "247/4191: duxativ90 bloqueado correctamente\n",
            "248/4191: srz222 bloqueado correctamente\n",
            "249/4191: Ruso1918 bloqueado correctamente\n",
            "250/4191: Oliverio1950 bloqueado correctamente\n",
            "251/4191: Chiruzinnen bloqueado correctamente\n",
            "252/4191: Farodelibertad_ bloqueado correctamente\n",
            "253/4191: seueueq bloqueado correctamente\n",
            "254/4191: juanfkees bloqueado correctamente\n",
            "255/4191: VictorMarkno bloqueado correctamente\n",
            "256/4191: N6829238766947 bloqueado correctamente\n",
            "257/4191: androideath666 bloqueado correctamente\n",
            "258/4191: Liliszoom bloqueado correctamente\n",
            "259/4191: MaritoVLLC bloqueado correctamente\n",
            "260/4191: DenGarayy bloqueado correctamente\n",
            "261/4191: kazami_j bloqueado correctamente\n",
            "262/4191: venetiahall_ bloqueado correctamente\n",
            "263/4191: lolo_p_2000 bloqueado correctamente\n",
            "264/4191: Palermoincuba bloqueado correctamente\n",
            "265/4191: BarrosMedinaJo1 bloqueado correctamente\n",
            "266/4191: AnielloMarcelo bloqueado correctamente\n",
            "267/4191: srtdueas bloqueado correctamente\n",
            "268/4191: Bocalocuraa10 bloqueado correctamente\n",
            "269/4191: lucho_20_ bloqueado correctamente\n",
            "270/4191: darioscarface0 bloqueado correctamente\n",
            "271/4191: Paltinha_ bloqueado correctamente\n",
            "272/4191: CM_RODRIGUEZR bloqueado correctamente\n",
            "273/4191: ThiagoBaEz19 bloqueado correctamente\n",
            "274/4191: DistopicLand bloqueado correctamente\n",
            "275/4191: ColumbiaLaw bloqueado correctamente\n",
            "276/4191: sebascaos bloqueado correctamente\n",
            "277/4191: lokisgard_cheat bloqueado correctamente\n",
            "278/4191: Nullius38964258 bloqueado correctamente\n",
            "279/4191: le_wachen bloqueado correctamente\n",
            "280/4191: MinDeMiller bloqueado correctamente\n",
            "281/4191: jjustbrendita bloqueado correctamente\n",
            "282/4191: MinSeg bloqueado correctamente\n",
            "283/4191: argentilei bloqueado correctamente\n",
            "284/4191: mauritiuszamora bloqueado correctamente\n",
            "285/4191: emilianomensor bloqueado correctamente\n",
            "286/4191: El_Teto_Medina bloqueado correctamente\n",
            "287/4191: mpaulaferreira bloqueado correctamente\n",
            "288/4191: maick_n_n bloqueado correctamente\n",
            "289/4191: 1peso2dolar bloqueado correctamente\n",
            "290/4191: Thekingok__ bloqueado correctamente\n",
            "291/4191: TomiiRaroXD bloqueado correctamente\n",
            "292/4191: VerdugoArg bloqueado correctamente\n",
            "293/4191: Espertneta bloqueado correctamente\n",
            "294/4191: raismash40673 bloqueado correctamente\n",
            "295/4191: idk780 bloqueado correctamente\n",
            "296/4191: MarceHL04 bloqueado correctamente\n",
            "297/4191: Script_112 bloqueado correctamente\n",
            "298/4191: Obermeyerklaus1 bloqueado correctamente\n",
            "299/4191: Antonio27591643 bloqueado correctamente\n",
            "300/4191: EChancho bloqueado correctamente\n",
            "301/4191: salamindetandil bloqueado correctamente\n",
            "302/4191: romani_gab bloqueado correctamente\n",
            "303/4191: PepeFerro840378 bloqueado correctamente\n",
            "304/4191: unlaocualquiera bloqueado correctamente\n",
            "305/4191: braianvb bloqueado correctamente\n",
            "306/4191: qloqbo bloqueado correctamente\n",
            "307/4191: PozinaB bloqueado correctamente\n",
            "308/4191: peynoxx bloqueado correctamente\n",
            "309/4191: mancity bloqueado correctamente\n",
            "310/4191: DordaAlejandro bloqueado correctamente\n",
            "311/4191: elcolosueiro bloqueado correctamente\n",
            "312/4191: analaclara bloqueado correctamente\n",
            "313/4191: CATdelCAT bloqueado correctamente\n",
            "314/4191: joelgimenez_28 bloqueado correctamente\n",
            "315/4191: EnzoAllende18 bloqueado correctamente\n",
            "316/4191: marcelo92945215 bloqueado correctamente\n",
            "317/4191: karykabur bloqueado correctamente\n",
            "318/4191: CordobesdeMilei bloqueado correctamente\n",
            "319/4191: Daio_luthier bloqueado correctamente\n",
            "320/4191: cris_nadin no pudo ser bloqueado\n",
            "321/4191: Fededu19 bloqueado correctamente\n",
            "322/4191: susiheidi bloqueado correctamente\n",
            "323/4191: CryptoALH bloqueado correctamente\n",
            "324/4191: xeneizedario5 bloqueado correctamente\n",
            "325/4191: LuckyLak6 bloqueado correctamente\n",
            "326/4191: Pochitadelcielo bloqueado correctamente\n",
            "327/4191: BMierez_ bloqueado correctamente\n",
            "328/4191: ArielVa71478950 bloqueado correctamente\n",
            "329/4191: georginaschust1 bloqueado correctamente\n",
            "330/4191: LeXy_LoBo bloqueado correctamente\n",
            "331/4191: Le96709Leites bloqueado correctamente\n",
            "332/4191: sionook7 bloqueado correctamente\n",
            "333/4191: magnum_VLLC bloqueado correctamente\n",
            "334/4191: Gatogzmn bloqueado correctamente\n",
            "335/4191: Ag_Monteverde bloqueado correctamente\n",
            "336/4191: ZapataAmilkar7 bloqueado correctamente\n",
            "337/4191: Zykkaroficial bloqueado correctamente\n",
            "338/4191: ajmechet bloqueado correctamente\n",
            "339/4191: 303mas_ bloqueado correctamente\n",
            "340/4191: LanceWilson92 bloqueado correctamente\n",
            "341/4191: KIRCHOSDOMADOS bloqueado correctamente\n",
            "342/4191: LoberzaOctavio bloqueado correctamente\n",
            "343/4191: juanif17 bloqueado correctamente\n",
            "344/4191: MarianoSardi bloqueado correctamente\n",
            "345/4191: loloquieresaber bloqueado correctamente\n",
            "346/4191: NewSamawal bloqueado correctamente\n",
            "347/4191: augustolacroze bloqueado correctamente\n",
            "348/4191: Zeta7309 bloqueado correctamente\n",
            "349/4191: Lorenzo65618898 bloqueado correctamente\n",
            "350/4191: Rosana23879858 bloqueado correctamente\n",
            "351/4191: Oleh_Leosan bloqueado correctamente\n",
            "352/4191: davidhernan04 bloqueado correctamente\n",
            "353/4191: Smartynez30 bloqueado correctamente\n",
            "354/4191: ferlpadilla bloqueado correctamente\n",
            "355/4191: medicnegligence bloqueado correctamente\n",
            "356/4191: CirilloLala bloqueado correctamente\n",
            "357/4191: Rosarigasino_4 bloqueado correctamente\n",
            "358/4191: NippurOfLagash bloqueado correctamente\n",
            "359/4191: Sabpiola bloqueado correctamente\n",
            "360/4191: 73Lucasdiaz bloqueado correctamente\n",
            "361/4191: ohmydog_r bloqueado correctamente\n",
            "362/4191: AdamKinzinger bloqueado correctamente\n",
            "363/4191: FacundoG128 bloqueado correctamente\n",
            "364/4191: BestRobin21 bloqueado correctamente\n",
            "365/4191: UrquiaNata69049 bloqueado correctamente\n",
            "367/4191: parada_lautaro bloqueado correctamente\n",
            "368/4191: IchRote bloqueado correctamente\n",
            "369/4191: MarceAmeal bloqueado correctamente\n",
            "370/4191: zetobelt bloqueado correctamente\n",
            "371/4191: pibalibertaria bloqueado correctamente\n",
            "372/4191: agusbeldi bloqueado correctamente\n",
            "373/4191: rodasr21 bloqueado correctamente\n",
            "374/4191: cbaliberal bloqueado correctamente\n",
            "375/4191: Cagazometro bloqueado correctamente\n",
            "376/4191: EraDeLibertad bloqueado correctamente\n",
            "377/4191: UPelken bloqueado correctamente\n",
            "378/4191: LaGordaAhVuelto bloqueado correctamente\n",
            "379/4191: TegridyArg bloqueado correctamente\n",
            "380/4191: HEC0912 bloqueado correctamente\n",
            "381/4191: ma_li_mrl bloqueado correctamente\n",
            "382/4191: MARIALO41328711 bloqueado correctamente\n",
            "383/4191: DrGusDElia bloqueado correctamente\n",
            "384/4191: santospopper bloqueado correctamente\n",
            "385/4191: LaOlaLibertaria bloqueado correctamente\n",
            "386/4191: FavioSchneeberg bloqueado correctamente\n",
            "387/4191: XDigitalAgency bloqueado correctamente\n",
            "388/4191: Kiricocho2021 bloqueado correctamente\n",
            "389/4191: mcampa_2126 bloqueado correctamente\n",
            "390/4191: soydonnadieok bloqueado correctamente\n",
            "391/4191: JonathanLanzini bloqueado correctamente\n",
            "392/4191: aguilablan78546 bloqueado correctamente\n",
            "393/4191: Ricardo19042905 bloqueado correctamente\n",
            "394/4191: JGarabeti bloqueado correctamente\n",
            "395/4191: RoDecepticon bloqueado correctamente\n",
            "396/4191: elbadm bloqueado correctamente\n",
            "397/4191: unitarizar bloqueado correctamente\n",
            "398/4191: fercomes bloqueado correctamente\n",
            "399/4191: mva______ bloqueado correctamente\n",
            "400/4191: RELIALred bloqueado correctamente\n",
            "401/4191: MPonquecito bloqueado correctamente\n",
            "402/4191: nacholandia3 bloqueado correctamente\n",
            "403/4191: urban_notes_ bloqueado correctamente\n",
            "404/4191: francocava06 bloqueado correctamente\n",
            "405/4191: saintliberte bloqueado correctamente\n",
            "406/4191: ndinanno bloqueado correctamente\n",
            "407/4191: GuilleGiglio77 bloqueado correctamente\n",
            "408/4191: JuanManueIG bloqueado correctamente\n",
            "409/4191: Maurici33980555 bloqueado correctamente\n",
            "410/4191: FlavioArenales bloqueado correctamente\n",
            "411/4191: javierLibertar2 bloqueado correctamente\n",
            "412/4191: almirantepapa bloqueado correctamente\n",
            "413/4191: cielo_fuerzas bloqueado correctamente\n",
            "414/4191: OaregueOscar bloqueado correctamente\n",
            "415/4191: churry1994 bloqueado correctamente\n",
            "416/4191: elmuchachouy bloqueado correctamente\n",
            "417/4191: ImTheReaLucas bloqueado correctamente\n",
            "418/4191: mataorKos bloqueado correctamente\n",
            "419/4191: JuanElordi bloqueado correctamente\n",
            "420/4191: Gral_Milller bloqueado correctamente\n",
            "421/4191: camizungri bloqueado correctamente\n",
            "422/4191: Emi_Schumacher bloqueado correctamente\n",
            "423/4191: Fernand04806505 bloqueado correctamente\n",
            "424/4191: GiovanottoBA bloqueado correctamente\n",
            "425/4191: pepitomisterio1 bloqueado correctamente\n",
            "426/4191: MartinFalse9 bloqueado correctamente\n",
            "427/4191: BULLRICHMANIA23 bloqueado correctamente\n",
            "428/4191: MileiAbrazoo bloqueado correctamente\n",
            "429/4191: Nunau_u bloqueado correctamente\n",
            "430/4191: antihackeo1 bloqueado correctamente\n",
            "431/4191: Federiks13 bloqueado correctamente\n",
            "432/4191: carolina_moine bloqueado correctamente\n",
            "433/4191: nachoviglione bloqueado correctamente\n",
            "434/4191: fandeunmas bloqueado correctamente\n",
            "435/4191: Alv4r4do bloqueado correctamente\n",
            "436/4191: JuampiMoliina bloqueado correctamente\n",
            "437/4191: DaaNTzBS bloqueado correctamente\n",
            "438/4191: pipucalito bloqueado correctamente\n",
            "439/4191: HagovJuanDoe bloqueado correctamente\n",
            "440/4191: AdrianaBon43439 bloqueado correctamente\n",
            "441/4191: UnBolainas bloqueado correctamente\n",
            "442/4191: OnixArgentina bloqueado correctamente\n",
            "443/4191: BostermoMaxbj bloqueado correctamente\n",
            "444/4191: _gilfer bloqueado correctamente\n",
            "445/4191: blknoiz06 bloqueado correctamente\n",
            "446/4191: lucasvidela1 bloqueado correctamente\n",
            "447/4191: bitgetglobal bloqueado correctamente\n",
            "448/4191: rukhasgunsalu bloqueado correctamente\n",
            "449/4191: Santii60494096 bloqueado correctamente\n",
            "450/4191: johnyaranda99 bloqueado correctamente\n",
            "451/4191: chiquivelasquez bloqueado correctamente\n",
            "452/4191: liberalote912 bloqueado correctamente\n",
            "453/4191: LibresFree bloqueado correctamente\n",
            "454/4191: PaulistadePaulo bloqueado correctamente\n",
            "455/4191: Vortex_56 bloqueado correctamente\n",
            "456/4191: RajputMalika bloqueado correctamente\n",
            "457/4191: acmesoft_arg bloqueado correctamente\n",
            "458/4191: BellaRo39880014 bloqueado correctamente\n",
            "459/4191: MazzioMatias bloqueado correctamente\n",
            "460/4191: NicoQns2 bloqueado correctamente\n",
            "461/4191: Argengchogau bloqueado correctamente\n",
            "462/4191: DidierRobles16 bloqueado correctamente\n",
            "463/4191: dalbercast bloqueado correctamente\n",
            "464/4191: ElNegroVeider bloqueado correctamente\n",
            "465/4191: Bellerophona13 bloqueado correctamente\n",
            "466/4191: Guybrush82del56 bloqueado correctamente\n",
            "467/4191: PatagoniaCielo bloqueado correctamente\n",
            "468/4191: WillyDelaney4 bloqueado correctamente\n",
            "469/4191: LeonMenemista bloqueado correctamente\n",
            "470/4191: veronicacasas18 bloqueado correctamente\n",
            "471/4191: ElChadCaputo bloqueado correctamente\n",
            "472/4191: Jupego691 bloqueado correctamente\n",
            "473/4191: gaby_7_ bloqueado correctamente\n",
            "474/4191: gustavo_srcc bloqueado correctamente\n",
            "475/4191: MariaMagallan8 bloqueado correctamente\n",
            "476/4191: PublicaMatanza bloqueado correctamente\n",
            "477/4191: VittorioCeccini bloqueado correctamente\n",
            "478/4191: tatireali bloqueado correctamente\n",
            "479/4191: Mardina1965 bloqueado correctamente\n",
            "480/4191: NachoValleok bloqueado correctamente\n",
            "481/4191: AmercedesAm bloqueado correctamente\n",
            "482/4191: SCchumer bloqueado correctamente\n",
            "483/4191: JohnGargan bloqueado correctamente\n",
            "484/4191: nicolastght bloqueado correctamente\n",
            "485/4191: ArGarrus no pudo ser bloqueado\n",
            "486/4191: jovo15092012 bloqueado correctamente\n",
            "487/4191: infokukahoy bloqueado correctamente\n",
            "488/4191: real_goodtime bloqueado correctamente\n",
            "489/4191: SantiRosales_SR bloqueado correctamente\n",
            "490/4191: Chelo_Hz bloqueado correctamente\n",
            "491/4191: bangcrashpuff bloqueado correctamente\n",
            "492/4191: elhaz35 bloqueado correctamente\n",
            "493/4191: PatriotaVida bloqueado correctamente\n",
            "494/4191: FrancoCarrizoPM bloqueado correctamente\n",
            "495/4191: LauchaNagy bloqueado correctamente\n",
            "496/4191: twitaahh bloqueado correctamente\n",
            "497/4191: nadirllambay bloqueado correctamente\n",
            "498/4191: lettyblur bloqueado correctamente\n",
            "El script retoma su trabajo en 120 segundos\n",
            "499/4191: lalocadeltaper bloqueado correctamente\n",
            "500/4191: marcelogregoris bloqueado correctamente\n",
            "501/4191: lukaper__ bloqueado correctamente\n",
            "502/4191: JorgeDa78836707 bloqueado correctamente\n",
            "503/4191: Revolucion68344 bloqueado correctamente\n",
            "504/4191: X_Files1989 bloqueado correctamente\n",
            "505/4191: cunnyrega88 bloqueado correctamente\n",
            "506/4191: Sequ41815Andres bloqueado correctamente\n",
            "507/4191: SacramoneAdrian bloqueado correctamente\n",
            "508/4191: cotta_franco bloqueado correctamente\n",
            "509/4191: Alejand20118179 bloqueado correctamente\n",
            "510/4191: Adriana56224210 bloqueado correctamente\n",
            "511/4191: XxDAWZxX bloqueado correctamente\n",
            "512/4191: Kevo_CJ bloqueado correctamente\n",
            "513/4191: don_scruffy bloqueado correctamente\n",
            "514/4191: rodrigo95739608 bloqueado correctamente\n",
            "515/4191: ViewerUser10 no pudo ser bloqueado\n",
            "516/4191: lencina_to80624 no pudo ser bloqueado\n",
            "517/4191: laura_grimoldi no pudo ser bloqueado\n",
            "518/4191: serasorpresa no pudo ser bloqueado\n",
            "519/4191: blaze_nigth no pudo ser bloqueado\n",
            "520/4191: AlanJesusB no pudo ser bloqueado\n",
            "521/4191: Jumadom no pudo ser bloqueado\n",
            "522/4191: guido_more no pudo ser bloqueado\n",
            "523/4191: Tito9k9 no pudo ser bloqueado\n",
            "524/4191: EmilianoDaFa no pudo ser bloqueado\n",
            "525/4191: correabn_ no pudo ser bloqueado\n",
            "Es probable que se haya alcanzando el límite de blocks diarios. Se volverá a intentar volviendo a abrir la cuenta\n",
            "User(id=1546095337252667392, username=cyberhjoong, name=gaelito 🏴‍☠️, verified=False)\n",
            "526/4191: martingambao724 bloqueado correctamente\n",
            "527/4191: nolive53 bloqueado correctamente\n",
            "528/4191: brian98cara bloqueado correctamente\n",
            "529/4191: lalidepos bloqueado correctamente\n",
            "530/4191: TmsNksh bloqueado correctamente\n",
            "531/4191: marioprofelegui bloqueado correctamente\n",
            "532/4191: brunotruncado bloqueado correctamente\n",
            "533/4191: AJGilaberte bloqueado correctamente\n",
            "534/4191: TimeBeRealMan bloqueado correctamente\n",
            "535/4191: milenaeldan bloqueado correctamente\n",
            "536/4191: Favitogonzalez bloqueado correctamente\n",
            "537/4191: RandyRa24367197 bloqueado correctamente\n",
            "538/4191: Ventar16 bloqueado correctamente\n",
            "539/4191: JaneMorrison123 bloqueado correctamente\n",
            "540/4191: oliv17706 bloqueado correctamente\n",
            "541/4191: cozzetti_ bloqueado correctamente\n",
            "542/4191: Santiag69549880 bloqueado correctamente\n",
            "543/4191: miguefont bloqueado correctamente\n",
            "544/4191: ezeiza2023 bloqueado correctamente\n",
            "545/4191: orion_060 bloqueado correctamente\n",
            "546/4191: Cone20671317 bloqueado correctamente\n",
            "547/4191: somaynieve bloqueado correctamente\n",
            "548/4191: CordobaLaMasGra bloqueado correctamente\n",
            "549/4191: Mileinnials bloqueado correctamente\n",
            "550/4191: juan1905boca bloqueado correctamente\n",
            "551/4191: Facup1711 bloqueado correctamente\n",
            "552/4191: LuisGordil57768 bloqueado correctamente\n",
            "553/4191: facundotaranto1 bloqueado correctamente\n",
            "554/4191: lanatiene1con0 bloqueado correctamente\n",
            "555/4191: FerneObrero bloqueado correctamente\n",
            "556/4191: conelleon2023 bloqueado correctamente\n",
            "557/4191: FuckDanAndrews bloqueado correctamente\n",
            "558/4191: GAJS0000 bloqueado correctamente\n",
            "559/4191: AkiZire bloqueado correctamente\n",
            "560/4191: elantipolenta bloqueado correctamente\n",
            "561/4191: sophiesweet2005 bloqueado correctamente\n",
            "562/4191: Juanpe1907 bloqueado correctamente\n",
            "563/4191: SofaCama21 bloqueado correctamente\n",
            "564/4191: PollomasterMDQ bloqueado correctamente\n",
            "565/4191: hermanosLLA bloqueado correctamente\n",
            "566/4191: barbiepiscu bloqueado correctamente\n",
            "567/4191: matiiiiiiiii22 bloqueado correctamente\n",
            "568/4191: neutrinosss bloqueado correctamente\n",
            "569/4191: Caipira51 bloqueado correctamente\n",
            "570/4191: Santi_Stereo bloqueado correctamente\n",
            "571/4191: MarcoLpez293009 bloqueado correctamente\n",
            "572/4191: axelmvdp bloqueado correctamente\n",
            "573/4191: vengadoraantik bloqueado correctamente\n",
            "574/4191: prensasantelmo bloqueado correctamente\n",
            "575/4191: OBaboso bloqueado correctamente\n",
            "576/4191: Blackend_ok bloqueado correctamente\n",
            "577/4191: AlejRozitchner bloqueado correctamente\n",
            "578/4191: drtod1000 bloqueado correctamente\n",
            "579/4191: riverpolaco bloqueado correctamente\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ejecutar la siguiente celda para descargar la nueva lista actualizada que solo tiene los usuarios que no han podido ser bloqueado antes. Podrás ejecutar el script nuevamente mañana siguiendo los pasos correspondientes"
      ],
      "metadata": {
        "id": "R3E6v-bwAPon"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inv_blocklist= {v: k for k, v in blocklist.items()}\n",
        "new_blocklist = {k:v for v,k in inv_blocklist.items() if v not in success_block}\n",
        "\n",
        "\n",
        "with open(f\"blocklist_{date.today()}.json\", 'w') as f:\n",
        "    json.dump(new_blocklist, f)\n",
        "\n",
        "files.download(f\"blocklist_{date.today()}.json\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "sD0ysjaH_O2F",
        "outputId": "ea3788a9-9a79-45ee-fd68-c7edc700db34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_43ce4153-a5e6-43ff-8662-7a8c8d1c3b13\", \"blocklist_2024-04-01.json\", 120608)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "#DEPRECATED\n",
        "'''\n",
        "for v in unsuccess_block:\n",
        "    if v in success_block:\n",
        "        continue\n",
        "    try:\n",
        "        app.block_user(f\"{v}\")\n",
        "        print(f\"{n}/{len(unsuccess_block)}: bloqueado correctamente\")\n",
        "        success_block.append(v)\n",
        "    except:\n",
        "        print(f\"{n}/{len(unsuccess_block)}: volvió a fallar\")\n",
        "        time.sleep(TIME)\n",
        "\n",
        "print(f\"Quedaron {len(unsuccess_block)} usuarios sin bloquear, si desea reintentar vuelva a correr esta misma celda, si sigue fallando incremente TIME en 1\")\n",
        "'''"
      ],
      "metadata": {
        "id": "vVVyffcKdSjS"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}